if __name__ == '__main__':  main函数命令行运行方式:
    -v 输出更详细的运行信息
    -s 输出调试信息
    -n 多线程运行
    --reruns 数字    失败用例重跑
    --html=报告的路径


pytest插件
    pytest-html             生成html报告
    pytest-xdist            多线程执行
    pytest-ordering         控制用例执行顺序
    pytest-rerunfailures    失败用例重跑
    pytest-base-url         基础路径
    allure-pytest           生成allure测试报告


前后置，夹具
    setup/teardown 在每个用例之前和之后执行一次
    setup_class/teardown_class  在每个类之前和之后执行一次

部分前置
@pytest.fixture(scope="作用域"，params="数据驱动"，autouse="自动执行"，ids="自定义参数名"，name="重命名"）
作用域：function,class,module,package/session


一般情况下:
    @pytest.fixture()一般会和conftest.py文件一起使用
    conftest.py名称是固定的，功能强大。
    1，conftest.py文件是单独存放@pytest.fixture()的方法。用处是可以在多个py文件之间共享前置配置。
    2，conftest.py里面的方法在调用时不需要导入，可以直接使用。
    3，conftest.py可以有多个，也可以有多个不同的层级。



接口自动化测试框架YAML数据驱动的封装
    @pytest.mark.parametrize(argnames='name',argvalues='value')
    argnames：参数名
    argvalues：参数值(使用list列表，tuple元组，字典列表，字典元组等）在数据有多少个值，那接口用例就会执行多少次。




YAML格式用例约定
1，必须包含一级关键字：name,requset,calidate
2，在requset关键字下必须包括:method,url,data  如data，没有的话，那么输入默认值{}
3，提取变量使用一级关键字extact。支持json提取和正则提取(.+?)和(.*?)，取值使用{{}}
4，可以使用热加载的方式调用debug_talk.py中的DebugTalk类里面的方法。通过${}调用方法
5，支持equals,contains两种断言方式
6，使用parameters做csv文件的数据驱动，通过$csv{appid}这种格式取值
parameters:
    name-appid-secret-grant_type-assert_str:data/get_token_data.csv